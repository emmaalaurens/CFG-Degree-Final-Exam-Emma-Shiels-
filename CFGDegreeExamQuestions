Redux questions: 
1: Function is a countReducer - reducer function from Redux. This takes the action and the state - then returns a new state based on that action. 
2:
Adding a decrement action to reduce the state value by 1:
function countReducer(state = initialState, action) {
    switch (action.type) {
        case 'increment':
            return {
                value: state.value + 1
            };
        case 'decrement':
            return {
                value: state.value - 1
            };
        default:
            return state;
    }
}


3: 
Adding an action that requires the reducer to reset the state. 
function countReducer(state = initialState, action) {
    switch (action.type) {
        case 'increment':
            return {
                value: state.value + 1
            };
        case 'decrement':
            return {
                value: state.value - 1
            };
        case 'reset':
            return initialState; // Resetting to the initial state
        default:
            return state;
    }
}
Part 2: 
Question 1:
Line 34 brief summary: useState(0) is a react hook that initalises the variable state with an initial value of zero. useState returns an array where the first element is the current state value: ‘studentsCount’. And setStudentsCount is the function that updates the state value (and that the user can update them). Summary: studentsCount is the current number of students and setStudentsCount is a function we can update this state with. 
Line 39 brief summary: button creates a button element with ‘Add Student’ as text. onClick is an event where the function is specified (when the user clickson the button). The ‘?????’ is a placeholder for the function/event for when the button is clicked and should be edited. 

I have added a) b) and c) where the questions have been answered, in my pseudocode.

// Define the classInfo component
const classInfo = () => {
    // a) Define state variable studentsCount and its updater function setStudentsCount
    let [studentsCount, setStudentsCount] = useState(0);

    // Define the event for the clicked "Add Student" button
    const handleAddStudent = () => {
        // b) Calculate the total number of present students
        const presentStudentsCount = students.reduce((count, student) => {
            if (student.present) {
                return count + 1;
            }
            return count;
        }, 0);

        // c) Update the studentsCount state with the total number of present students
        setStudentsCount(presentStudentsCount);
    };

    // Return the JSX for the component
    return (
        <div>
            <p>Number of students in class room: {studentsCount}</p>
            {/* Bind the click event handler to the button */}
            <button onClick={handleAddStudent}>Add Student</button>
        </div>
    );

Part 3
1)
Line 174 change of code: this affects how the state is updated. The function is an increment and increments the current value by the value provided in ‘action.payload’ 
2) If we aren’t setting the state locally anymore, we want to use dispatch. We would need to make some changes. We’d first have to import useDispatch from redux. Please see below for more information on what we would have to change to figure 4, 3 and 2. 

const classInfo = () => {
    const dispatch = useDispatch(); // useDispatch redux hook

    let [studentsCount, setStudentsCount] = useState(0);

    const handleAddStudent = () => {
        const presentStudentsCount = students.reduce((count, student) => {
            if (student.present) {
                return count + 1;
            }
            return count;
        }, 0);

        // Dispatching an "increment" action with presentStudentsCount as payload
        dispatch({ type: 'increment', payload: presentStudentsCount });
    };

    return (
        <div>
            <p>Number of students in class room: {studentsCount}</p>
            <button onClick={handleAddStudent}>Add Student</button>
        </div>
    );
};


};

3) 
Figure 4 is best suited to ensure that the increment action updates the state with the correct total number of present students. This is because the code ensures the count reflects the total number of present students using accumulation over multiple dispatches. 
The difference in code is that in figure 4, it increments the value by adding the payload to the current state’s value, accumulating dispatches.
In figure 5, the value is set to the payload value

Algorithms 1 (coding)
1. 
My code is below, I had to use codepen for this as my VScode stopped updating git. 
// Define the isPalindrome function
function isPalindrome(s) {
    let left = 0;
    let right = s.length - 1;

    while (left < right) {
        if (s[left] !== s[right]) {
            return false;
        }
        left++;
        right--;
    }

    return true;
}

// Test cases
console.log(isPalindrome(''));           // Output: true (empty string is a palindrome)
console.log(isPalindrome('a'));          // Output: true (single character string is a palindrome)
console.log(isPalindrome('beansr'));    // Output: true (palindrome string)
console.log(isPalindrome('hello'));      // Output: false (non-palindrome string)

My discussion: 
So the isPalindrome is used with left and right as pointers to traverse the string from both ends at the same time, the two pointer technique. This will return false as soon as the characters don’t match, showing that the string is not a palindrome. It will return true if the match is a palindrome. For time and space complexity, using the two pointer technique, the time complexity is O(n) as n is the length of the input string. The space complexity is O(1) as there are two pointers that are stored using a constant amount of space. 
I used this approach as the two pointer method is much more easy to understand, and it looks at both ends at the same time, and this results in linear time complexity. 


Algorithms 2 (coding)
(JS) 
Please see below my JS code for the missing array number. I tested this and it does return the mising number, and also gives off errors for the non-positive integers or any non-numeric values. 
function findMissingNumber(arr) {
    // Check if input array contains non-positive integers or non-numeric values
    for (let i = 0; i < arr.length; i++) {
        if (typeof arr[i] !== 'number' || arr[i] <= 0 || isNaN(arr[i])) {
            return "Error: Input array contains non-positive integer or non-numeric value";
        }
    }

    // Calculate the expected sum of numbers from 1 to n
    const n = arr.length + 1;
    const expectedSum = (n * (n + 1)) / 2;
    
    // Calculate the actual sum of numbers in the input array
    let actualSum = 0;
    for (let i = 0; i < arr.length; i++) {
        actualSum += arr[i];
    }

    // Return the missing number by subtracting actual sum from expected sum
    return expectedSum - actualSum;
}

// Example usage:
console.log(findMissingNumber([3, 7, 1, 2, 8, 4, 5])); // Output: 6
console.log(findMissingNumber([3, -7, 1, 2, 8, 4, 5])); // Output: Error: Input array contains non-positive integer or non-numeric value
console.log(findMissingNumber([3, 'a', 1, 2, 8, 4, 5])); // Output: Error: Input array contains non-positive integer or non-numeric value


